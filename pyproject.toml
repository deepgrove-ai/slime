[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "slime"
version = "0.0.1"
description = "Slime - A distributed training and inference framework"
authors = [{ name = "slime Team" }]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Environment :: GPU :: NVIDIA CUDA",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Distributed Computing",
]
dependencies = [
    "accelerate",
    "datasets",
    "httpx[http2]",
    "mcp[cli]",
    "pylatexenc",
    "pyyaml",
    "ray[default]",
    "torch",
    "transformers>=4.56.0",
    "liger-kernel>=0.5.5",
    "wandb",
    "huggingface_hub",
    "veomni",
    "torch_memory_saver",
]

[dependency-groups]
docker-override = ["sglang>=0.5.2"]
dev = ["pytest>=7.0.0", "black>=23.0.0", "isort>=5.12.0", "ruff>=0.1.0"]


[tool.hatch.build.targets.wheel]

packages = ["slime", "slime_plugins"]

[tool.hatch.build.targets.wheel.sources]
"." = ""

[tool.hatch.build.targets.sdist]
include = [
    "/slime",
    "/slime_plugins",
    "/examples",
    "/scripts",
    "/tools",
    "/tests",
    "/docs",
    "/README.md",
    "/README_zh.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.hatch.build.targets.wheel.shared-data]
"slime" = "slime"
"slime_plugins" = "slime_plugins"

[tool.isort]
profile = "black"
line_length = 119
ignore_whitespace = true
py_version = 310
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
extend_skip = ["setup.py", "docs/source/conf.py"]


[tool.ruff]
line-length = 119

[tool.pytest.ini_options]
addopts = "--verbose --pyargs --durations=0 --strict-markers"
testpaths = ["./tests"]
norecursedirs = [
    "external",
    "examples",
    "docs",
    "scripts",
    "tools",
    "tutorials",
    "*.egg",
    ".*",
    "_darcs",
    "CVS",
    "dist",
    "venv",
    "{arch}",
]
markers = [
    "unit: marks unit test, i.e. testing a single, well isolated functionality (deselect with '-m \"not unit\"')",
    "integration: marks test checking the elements when integrated into subsystems (deselect with '-m \"not integration\"')",
    "system: marks test working at the highest integration level (deselect with '-m \"not system\"')",
    "acceptance: marks test checking whether the developed product/model passes the user defined acceptance criteria (deselect with '-m \"not acceptance\"')",
    "docs: mark tests related to documentation (deselect with '-m \"not docs\"')",
    "skipduringci: marks tests that are skipped ci as they are addressed by Jenkins jobs but should be run to test user setups",
    "pleasefixme: marks tests that are broken and need fixing",
]

[tool.uv]

default-groups = ["dev", "docker-override"]

[tool.uv.sources]
"veomni" = { path = "VeOmni", editable = true }
"torch_memory_saver" = { git = "https://github.com/fzyzcjy/torch_memory_saver.git" }
torch = [{ index = "torch_12.8", marker = "sys_platform == 'linux'" }]

[[tool.uv.index]]
name = "torch_12.8"
url = "https://download.pytorch.org/whl/cu126"
explicit = true
